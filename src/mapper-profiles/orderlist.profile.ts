//src/mapper-profiles/orderlist.profile.ts

import { OrderListDto,CreateOrderlistDto, UpdateOrderlistDto, OrderlistResponseDto } from '@/dtos/orderlist.dto';
import  orderlist  from '@/models/OrderList';
import { MappingProfile, createMap, forMember, mapFrom } from '@automapper/core';

export const OrderlistProfile: MappingProfile = (mapper) => {
  createMap(
    mapper,
    orderlist,
    OrderListDto,
    forMember((d) => d.userType, mapFrom((s: orderlist) => s.userType)),
    forMember((d) => d.gstin, mapFrom((s: orderlist) => s.gstin)),
    forMember((d) => d.pan, mapFrom((s: orderlist) => s.pan)),
    forMember((d) => d.aadhaar, mapFrom((s: orderlist) => s.aadhaar)),
    forMember((d) => d.emailId, mapFrom((s: orderlist) => s.emailId)),
    forMember((d) => d.preferredPaymentMethod, mapFrom((s: orderlist) => s.preferredPaymentMethod)),
    forMember((d) => d.creditDays, mapFrom((s: orderlist) => s.creditDays)),
    forMember((d) => d.billingFullName, mapFrom((s: orderlist) => s.billingFullName)),
    forMember((d) => d.billingMobileNumber, mapFrom((s: orderlist) => s.billingMobileNumber)),
    forMember((d) => d.billingLine1, mapFrom((s: orderlist) => s.billingLine1)),
    forMember((d) => d.billingLine2, mapFrom((s: orderlist) => s.billingLine2)),
    forMember((d) => d.billingPincode, mapFrom((s: orderlist) => s.billingPincode)),
    forMember((d) => d.billingCity, mapFrom((s: orderlist) => s.billingCity)),
    forMember((d) => d.billingState, mapFrom((s: orderlist) => s.billingState)),
    forMember((d) => d.shippingFullName, mapFrom((s: orderlist) => s.shippingFullName)),
    forMember((d) => d.shippingMobileNumber, mapFrom((s: orderlist) => s.shippingMobileNumber)),
    forMember((d) => d.shippingLine1, mapFrom((s: orderlist) => s.shippingLine1)),
    forMember((d) => d.shippingLine2, mapFrom((s: orderlist) => s.shippingLine2)),
    forMember((d) => d.shippingPincode, mapFrom((s: orderlist) => s.shippingPincode)),
    forMember((d) => d.shippingCity, mapFrom((s: orderlist) => s.shippingCity)),
    forMember((d) => d.shippingState, mapFrom((s: orderlist) => s.shippingState)),
    forMember((d) => d.orderedAt, mapFrom((s: orderlist) => s.orderedAt)),
    forMember((d) => d.orderedUpdatedAt, mapFrom((s: orderlist) => s.orderedUpdatedAt)),
    forMember((d) => d.orderedAgreedAt, mapFrom((s: orderlist) => s.orderedAgreedAt)),
    forMember((d) => d.paidAt, mapFrom((s: orderlist) => s.paidAt)),
    forMember((d) => d.outForDeliveryAt, mapFrom((s: orderlist) => s.outForDeliveryAt)),
    forMember((d) => d.deliveredAt, mapFrom((s: orderlist) => s.deliveredAt)),
    forMember((d) => d.closedAt, mapFrom((s: orderlist) => s.closedAt)),
    forMember((d) => d.salesAgentId, mapFrom((s: orderlist) => s.salesAgentId)),
    forMember((d) => d.isInterStateDelivery, mapFrom((s: orderlist) => Boolean(s.isInterStateDelivery))), // Ensure boolean type
    forMember((d) => d.orderType, mapFrom((s: orderlist) => s.orderType)),
    forMember((d) => d.interestPercentage, mapFrom((s: orderlist) => s.interestPercentage)),
    forMember((d) => d.note, mapFrom((s: orderlist) => s.note)),
    forMember((d) => d.userId, mapFrom((s: orderlist) => s.userId)),
    forMember((d) => d.purchaseOrderNumber, mapFrom((s: orderlist) => s.purchaseOrderNumber)),
    forMember((d) => d.purchaseOrderDate, mapFrom((s: orderlist) => s.purchaseOrderDate)),
    forMember((d) => d.locationId, mapFrom((s: orderlist) => s.locationId))
  );

  // Mapping from UpdateOrderlistDto to orderlist model
  createMap(
    mapper,
    CreateOrderlistDto,
    orderlist,
    forMember((d) => d.userType, mapFrom((s: CreateOrderlistDto) => s.userType)),
    forMember((d) => d.gstin, mapFrom((s: CreateOrderlistDto) => s.gstin)),
    forMember((d) => d.pan, mapFrom((s: CreateOrderlistDto) => s.pan)),
    forMember((d) => d.aadhaar, mapFrom((s: CreateOrderlistDto) => s.aadhaar)),
    forMember((d) => d.emailId, mapFrom((s: CreateOrderlistDto) => s.emailId)),
    forMember((d) => d.preferredPaymentMethod, mapFrom((s: CreateOrderlistDto) => s.preferredPaymentMethod)),
    forMember((d) => d.creditDays, mapFrom((s: CreateOrderlistDto) => s.creditDays)),
    forMember((d) => d.billingFullName, mapFrom((s: CreateOrderlistDto) => s.billingFullName)),
    forMember((d) => d.billingMobileNumber, mapFrom((s: CreateOrderlistDto) => s.billingMobileNumber)),
    forMember((d) => d.billingLine1, mapFrom((s: CreateOrderlistDto) => s.billingLine1)),
    forMember((d) => d.billingLine2, mapFrom((s: CreateOrderlistDto) => s.billingLine2)),
    forMember((d) => d.billingPincode, mapFrom((s: CreateOrderlistDto) => s.billingPincode)),
    forMember((d) => d.billingCity, mapFrom((s: CreateOrderlistDto) => s.billingCity)),
    forMember((d) => d.billingState, mapFrom((s: CreateOrderlistDto) => s.billingState)),
    forMember((d) => d.shippingFullName, mapFrom((s: CreateOrderlistDto) => s.shippingFullName)),
    forMember((d) => d.shippingMobileNumber, mapFrom((s: CreateOrderlistDto) => s.shippingMobileNumber)),
    forMember((d) => d.shippingLine1, mapFrom((s: CreateOrderlistDto) => s.shippingLine1)),
    forMember((d) => d.shippingLine2, mapFrom((s: CreateOrderlistDto) => s.shippingLine2)),
    forMember((d) => d.shippingPincode, mapFrom((s: CreateOrderlistDto) => s.shippingPincode)),
    forMember((d) => d.shippingCity, mapFrom((s: CreateOrderlistDto) => s.shippingCity)),
    forMember((d) => d.shippingState, mapFrom((s: CreateOrderlistDto) => s.shippingState)),
    forMember((d) => d.orderedAt, mapFrom((s: CreateOrderlistDto) => s.orderedAt)),
    forMember((d) => d.orderedUpdatedAt, mapFrom((s: CreateOrderlistDto) => s.orderedUpdatedAt)),
    forMember((d) => d.orderedAgreedAt, mapFrom((s: CreateOrderlistDto) => s.orderedAgreedAt)),
    forMember((d) => d.paidAt, mapFrom((s: CreateOrderlistDto) => s.paidAt)),
    forMember((d) => d.outForDeliveryAt, mapFrom((s: CreateOrderlistDto) => s.outForDeliveryAt)),
    forMember((d) => d.deliveredAt, mapFrom((s: CreateOrderlistDto) => s.deliveredAt)),
    forMember((d) => d.closedAt, mapFrom((s: CreateOrderlistDto) => s.closedAt)),
    forMember((d) => d.salesAgentId, mapFrom((s: CreateOrderlistDto) => s.salesAgentId)),
    forMember((d) => d.isInterStateDelivery, mapFrom((s: CreateOrderlistDto) => (s.isInterStateDelivery))), 
    forMember((d) => d.orderType, mapFrom((s: CreateOrderlistDto) => s.orderType)),
    forMember((d) => d.interestPercentage, mapFrom((s: CreateOrderlistDto) => s.interestPercentage)),
    forMember((d) => d.note, mapFrom((s: CreateOrderlistDto) => s.note)),
    forMember((d) => d.purchaseOrderNumber, mapFrom((s: CreateOrderlistDto) => s.purchaseOrderNumber)),
    forMember((d) => d.purchaseOrderDate, mapFrom((s: CreateOrderlistDto) => s.purchaseOrderDate)),
    forMember((d) => d.locationId, mapFrom((s: CreateOrderlistDto) => s.locationId))
  );


  // Mapping from UpdateOrderlistDto to orderlist model
  createMap(
    mapper,
    UpdateOrderlistDto,
    orderlist,
    forMember((d) => d.userType, mapFrom((s: UpdateOrderlistDto) => s.userType)),
    forMember((d) => d.gstin, mapFrom((s: UpdateOrderlistDto) => s.gstin)),
    forMember((d) => d.pan, mapFrom((s: UpdateOrderlistDto) => s.pan)),
    forMember((d) => d.aadhaar, mapFrom((s: UpdateOrderlistDto) => s.aadhaar)),
    forMember((d) => d.emailId, mapFrom((s: UpdateOrderlistDto) => s.emailId)),
    forMember((d) => d.preferredPaymentMethod, mapFrom((s: UpdateOrderlistDto) => s.preferredPaymentMethod)),
    forMember((d) => d.creditDays, mapFrom((s: UpdateOrderlistDto) => s.creditDays)),
    forMember((d) => d.billingFullName, mapFrom((s: UpdateOrderlistDto) => s.billingFullName)),
    forMember((d) => d.billingMobileNumber, mapFrom((s: UpdateOrderlistDto) => s.billingMobileNumber)),
    forMember((d) => d.billingLine1, mapFrom((s: UpdateOrderlistDto) => s.billingLine1)),
    forMember((d) => d.billingLine2, mapFrom((s: UpdateOrderlistDto) => s.billingLine2)),
    forMember((d) => d.billingPincode, mapFrom((s: UpdateOrderlistDto) => s.billingPincode)),
    forMember((d) => d.billingCity, mapFrom((s: UpdateOrderlistDto) => s.billingCity)),
    forMember((d) => d.billingState, mapFrom((s: UpdateOrderlistDto) => s.billingState)),
    forMember((d) => d.shippingFullName, mapFrom((s: UpdateOrderlistDto) => s.shippingFullName)),
    forMember((d) => d.shippingMobileNumber, mapFrom((s: UpdateOrderlistDto) => s.shippingMobileNumber)),
    forMember((d) => d.shippingLine1, mapFrom((s: UpdateOrderlistDto) => s.shippingLine1)),
    forMember((d) => d.shippingLine2, mapFrom((s: UpdateOrderlistDto) => s.shippingLine2)),
    forMember((d) => d.shippingPincode, mapFrom((s: UpdateOrderlistDto) => s.shippingPincode)),
    forMember((d) => d.shippingCity, mapFrom((s: UpdateOrderlistDto) => s.shippingCity)),
    forMember((d) => d.shippingState, mapFrom((s: UpdateOrderlistDto) => s.shippingState)),
    forMember((d) => d.orderedAt, mapFrom((s: UpdateOrderlistDto) => s.orderedAt)),
    forMember((d) => d.orderedUpdatedAt, mapFrom((s: UpdateOrderlistDto) => s.orderedUpdatedAt)),
    forMember((d) => d.orderedAgreedAt, mapFrom((s: UpdateOrderlistDto) => s.orderedAgreedAt)),
    forMember((d) => d.paidAt, mapFrom((s: UpdateOrderlistDto) => s.paidAt)),
    forMember((d) => d.outForDeliveryAt, mapFrom((s: UpdateOrderlistDto) => s.outForDeliveryAt)),
    forMember((d) => d.deliveredAt, mapFrom((s: UpdateOrderlistDto) => s.deliveredAt)),
    forMember((d) => d.closedAt, mapFrom((s: UpdateOrderlistDto) => s.closedAt)),
    forMember((d) => d.salesAgentId, mapFrom((s: UpdateOrderlistDto) => s.salesAgentId)),
    forMember((d) => d.isInterStateDelivery, mapFrom((s: UpdateOrderlistDto) => (s.isInterStateDelivery))), 
    forMember((d) => d.orderType, mapFrom((s: UpdateOrderlistDto) => s.orderType)),
    forMember((d) => d.interestPercentage, mapFrom((s: UpdateOrderlistDto) => s.interestPercentage)),
    forMember((d) => d.note, mapFrom((s: UpdateOrderlistDto) => s.note)),
    forMember((d) => d.purchaseOrderNumber, mapFrom((s: UpdateOrderlistDto) => s.purchaseOrderNumber)),
    forMember((d) => d.purchaseOrderDate, mapFrom((s: UpdateOrderlistDto) => s.purchaseOrderDate)),
    forMember((d) => d.locationId, mapFrom((s: UpdateOrderlistDto) => s.locationId))
  );

  // Mapping from orderlist model to OrderlistResponseDto
  createMap(
    mapper,
    orderlist,
    OrderlistResponseDto,
    forMember((d) => d.id, mapFrom((s: orderlist) => s.id)),
    forMember((d) => d.purchaseOrderNumber, mapFrom((s: orderlist) => s.purchaseOrderNumber)),
    forMember((d) => d.purchaseOrderDate, mapFrom((s: orderlist) => s.purchaseOrderDate)),
    forMember((d) => d.userType, mapFrom((s: orderlist) => s.userType)),
    forMember((d) => d.gstin, mapFrom((s: orderlist) => s.gstin)),
    forMember((d) => d.pan, mapFrom((s: orderlist) => s.pan)),
    forMember((d) => d.aadhaar, mapFrom((s: orderlist) => s.aadhaar)),
    forMember((d) => d.emailId, mapFrom((s: orderlist) => s.emailId)),
    forMember((d) => d.preferredPaymentMethod, mapFrom((s: orderlist) => s.preferredPaymentMethod)),
    forMember((d) => d.creditDays, mapFrom((s: orderlist) => s.creditDays)),
    forMember((d) => d.billingFullName, mapFrom((s: orderlist) => s.billingFullName)),
    forMember((d) => d.billingMobileNumber, mapFrom((s: orderlist) => s.billingMobileNumber)),
    forMember((d) => d.billingLine1, mapFrom((s: orderlist) => s.billingLine1)),
    forMember((d) => d.billingLine2, mapFrom((s: orderlist) => s.billingLine2)),
    forMember((d) => d.billingPincode, mapFrom((s: orderlist) => s.billingPincode)),
    forMember((d) => d.billingCity, mapFrom((s: orderlist) => s.billingCity)),
    forMember((d) => d.billingState, mapFrom((s: orderlist) => s.billingState)),
    forMember((d) => d.shippingFullName, mapFrom((s: orderlist) => s.shippingFullName)),
    forMember((d) => d.shippingMobileNumber, mapFrom((s: orderlist) => s.shippingMobileNumber)),
    forMember((d) => d.shippingLine1, mapFrom((s: orderlist) => s.shippingLine1)),
    forMember((d) => d.shippingLine2, mapFrom((s: orderlist) => s.shippingLine2)),
    forMember((d) => d.shippingPincode, mapFrom((s: orderlist) => s.shippingPincode)),
    forMember((d) => d.shippingCity, mapFrom((s: orderlist) => s.shippingCity)),
    forMember((d) => d.shippingState, mapFrom((s: orderlist) => s.shippingState)),
  );
};