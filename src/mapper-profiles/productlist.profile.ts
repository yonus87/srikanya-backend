// src/mapper-profiles/productlist.profile.ts

import { ProductResponseDto, CreateProductDto, UpdateProductDto, ProductListResponseDto } from '@/dtos/productlist.dto';
import products from '@/models/productlist';
import { MappingProfile, createMap, forMember, mapFrom } from '@automapper/core';

export const productProfile: MappingProfile = (mapper) => {
  // Mapping from products model to ProductResponseDto
  createMap(
    mapper,
    products,
    ProductResponseDto,
    forMember((d) => d.id, mapFrom((s: products) => s.id)),
    forMember((d) => d.name, mapFrom((s: products) => s.name)),
    forMember((d) => d.imageLink, mapFrom((s: products) => s.imageLink)),
    forMember((d) => d.description, mapFrom((s: products) => s.description)),
    forMember((d) => d.primaryRate, mapFrom((s: products) => s.primaryRate)),
    forMember((d) => d.cgstPercent, mapFrom((s: products) => s.cgstPercent)),
    forMember((d) => d.igstPercent, mapFrom((s: products) => s.igstPercent)),
    forMember((d) => d.sgstPercent, mapFrom((s: products) => s.sgstPercent)),
    forMember((d) => d.conversionRatio, mapFrom((s: products) => s.conversionRatio ?? 1)),
    forMember((d) => d.hsnCode, mapFrom((s: products) => s.hsnCode)),
    forMember((d) => d.isDeleted, mapFrom((s: products) => Boolean(s.isDeleted))),
    forMember((d) => d.isDisabled, mapFrom((s: products) => Boolean(s.isDisabled))),
    forMember((d) => d.categoryId, mapFrom((s: products) => s.categoryId ?? null)),
    forMember((d) => d.brandId, mapFrom((s: products) => s.brandId ?? null)),
    forMember((d) => d.inventoryId, mapFrom((s: products) => s.inventoryId ?? null)),
    forMember((d) => d.locationId, mapFrom((s: products) => s.locationId ?? null)),
    forMember((d) => d.Rodprice, mapFrom((s: products) => s.Rodprice)),
    forMember((d) => d.length, mapFrom((s: products) => s.length ?? null)),
    forMember((d) => d.breadth, mapFrom((s: products) => s.breadth ?? null)),
    forMember((d) => d.height, mapFrom((s: products) => s.height ?? null)),
    forMember((d) => d.thickness, mapFrom((s: products) => s.thickness ?? null)),
    forMember((d) => d.diameter, mapFrom((s: products) => s.diameter ?? null)),
    forMember((d) => d.grade, mapFrom((s: products) => s.grade ?? null)),
    forMember((d) => d.angle, mapFrom((s: products) => s.angle ?? null)),
    forMember((d) => d.shape, mapFrom((s: products) => s.shape ?? null)),
  );

  // Mapping from CreateProductDto to products model
  createMap(
    mapper,
    CreateProductDto,
    products,
    forMember((d) => d.name, mapFrom((s: CreateProductDto) => s.name)),
    forMember((d) => d.imageLink, mapFrom((s: CreateProductDto) => s.imageLink)),
    forMember((d) => d.description, mapFrom((s: CreateProductDto) => s.description)),
    forMember((d) => d.primaryRate, mapFrom((s: CreateProductDto) => s.primaryRate)),
    forMember((d) => d.cgstPercent, mapFrom((s: CreateProductDto) => s.cgstPercent)),
    forMember((d) => d.igstPercent, mapFrom((s: CreateProductDto) => s.igstPercent)),
    forMember((d) => d.sgstPercent, mapFrom((s: CreateProductDto) => s.sgstPercent)),
    forMember((d) => d.conversionRatio, mapFrom((s: CreateProductDto) => s.conversionRatio ?? 1)),
    forMember((d) => d.hsnCode, mapFrom((s: CreateProductDto) => s.hsnCode)),
    forMember((d) => d.isDeleted, mapFrom((s: CreateProductDto) => s.isDeleted ?? 0)),
    forMember((d) => d.isDisabled, mapFrom((s: CreateProductDto) => s.isDisabled ?? 0)),
    forMember((d) => d.categoryId, mapFrom((s: CreateProductDto) => s.categoryId ?? null)),
    forMember((d) => d.brandId, mapFrom((s: CreateProductDto) => s.brandId ?? null)),
    forMember((d) => d.inventoryId, mapFrom((s: CreateProductDto) => s.inventoryId ?? null)),
    forMember((d) => d.locationId, mapFrom((s: CreateProductDto) => s.locationId ?? null)),
    forMember((d) => d.Rodprice, mapFrom((s: CreateProductDto) => s.Rodprice)), 
    forMember((d) => d.length, mapFrom((s: CreateProductDto) => s.length ?? null)),
    forMember((d) => d.breadth, mapFrom((s: CreateProductDto) => s.breadth ?? null)),
    forMember((d) => d.height, mapFrom((s: CreateProductDto) => s.height ?? null)),
    forMember((d) => d.thickness, mapFrom((s: CreateProductDto) => s.thickness ?? null)),
    forMember((d) => d.diameter, mapFrom((s: CreateProductDto) => s.diameter ?? null)),
    forMember((d) => d.grade, mapFrom((s: CreateProductDto) => s.grade ?? null)),
    forMember((d) => d.angle, mapFrom((s: CreateProductDto) => s.angle ?? null)),
    forMember((d) => d.shape, mapFrom((s: CreateProductDto) => s.shape ?? null)),

  );

  // Mapping from UpdateProductDto to products model
  createMap(
    mapper,
    UpdateProductDto,
    products,
    forMember((d) => d.name, mapFrom((s: UpdateProductDto) => s.name ?? null)),
    forMember((d) => d.imageLink, mapFrom((s: UpdateProductDto) => s.imageLink ?? null)),
    forMember((d) => d.description, mapFrom((s: UpdateProductDto) => s.description ?? null)),
    forMember((d) => d.primaryRate, mapFrom((s: UpdateProductDto) => s.primaryRate ?? null)),
    forMember((d) => d.cgstPercent, mapFrom((s: UpdateProductDto) => s.cgstPercent ?? null)),
    forMember((d) => d.igstPercent, mapFrom((s: UpdateProductDto) => s.igstPercent ?? null)),
    forMember((d) => d.sgstPercent, mapFrom((s: UpdateProductDto) => s.sgstPercent ?? null)),
    forMember((d) => d.conversionRatio, mapFrom((s: UpdateProductDto) => s.conversionRatio ?? 1)),
    forMember((d) => d.hsnCode, mapFrom((s: UpdateProductDto) => s.hsnCode ?? null)),
    forMember((d) => d.isDeleted, mapFrom((s: UpdateProductDto) => s.isDeleted ?? null)),
    forMember((d) => d.isDisabled, mapFrom((s: UpdateProductDto) => s.isDisabled ?? null)),
    forMember((d) => d.categoryId, mapFrom((s: UpdateProductDto) => s.categoryId ?? null)),
    forMember((d) => d.brandId, mapFrom((s: UpdateProductDto) => s.brandId ?? null)),
    forMember((d) => d.inventoryId, mapFrom((s: UpdateProductDto) => s.inventoryId ?? null)),
    forMember((d) => d.locationId, mapFrom((s: UpdateProductDto) => s.locationId ?? null)),
    forMember((d) => d.Rodprice, mapFrom((s: UpdateProductDto) => s.Rodprice)), 
    forMember((d) => d.length, mapFrom((s: UpdateProductDto) => s.length ?? null)),
    forMember((d) => d.breadth, mapFrom((s: UpdateProductDto) => s.breadth ?? null)),
    forMember((d) => d.height, mapFrom((s: UpdateProductDto) => s.height ?? null)),
    forMember((d) => d.thickness, mapFrom((s: UpdateProductDto) => s.thickness ?? null)),
    forMember((d) => d.diameter, mapFrom((s: UpdateProductDto) => s.diameter ?? null)),
    forMember((d) => d.grade, mapFrom((s: UpdateProductDto) => s.grade ?? null)),
    forMember((d) => d.angle, mapFrom((s: UpdateProductDto) => s.angle ?? null)),
    forMember((d) => d.shape, mapFrom((s: UpdateProductDto) => s.shape ?? null)),
  );

  // Mapping from products model to ProductListResponseDto
  createMap(
    mapper,
    products,
    ProductListResponseDto,
    forMember((d) => d.id, mapFrom((s: products) => s.id)),
    forMember((d) => d.name, mapFrom((s: products) => s.name)),
    forMember((d) => d.imageLink, mapFrom((s: products) => s.imageLink)),
    forMember((d) => d.description, mapFrom((s: products) => s.description)),
    forMember((d) => d.primaryRate, mapFrom((s: products) => s.primaryRate)),
    forMember((d) => d.cgstPercent, mapFrom((s: products) => s.cgstPercent)),
    forMember((d) => d.igstPercent, mapFrom((s: products) => s.igstPercent)),
    forMember((d) => d.sgstPercent, mapFrom((s: products) => s.sgstPercent)),
    forMember((d) => d.conversionRatio, mapFrom((s: products) => s.conversionRatio ?? 1)),
    forMember((d) => d.hsnCode, mapFrom((s: products) => s.hsnCode)),
    forMember((d) => d.isDeleted, mapFrom((s: products) => Boolean(s.isDeleted))),
    forMember((d) => d.isDisabled, mapFrom((s: products) => Boolean(s.isDisabled))),
    forMember((d) => d.categoryId, mapFrom((s: products) => s.categoryId ?? null)),
    forMember((d) => d.brandId, mapFrom((s: products) => s.brandId ?? null)),
    forMember((d) => d.inventoryId, mapFrom((s: products) => s.inventoryId ?? null)),
    forMember((d) => d.locationId, mapFrom((s: products) => s.locationId ?? null)),
    forMember((d) => d.Rodprice, mapFrom((s: products) => s.Rodprice)),  
    forMember((d) => d.length, mapFrom((s: products) => s.length ?? null)),
    forMember((d) => d.breadth, mapFrom((s: products) => s.breadth ?? null)),
    forMember((d) => d.height, mapFrom((s: products) => s.height ?? null)),
    forMember((d) => d.thickness, mapFrom((s: products) => s.thickness ?? null)),
    forMember((d) => d.diameter, mapFrom((s: products) => s.diameter ?? null)),
    forMember((d) => d.grade, mapFrom((s: products) => s.grade ?? null)),
    forMember((d) => d.angle, mapFrom((s: products) => s.angle ?? null)),
    forMember((d) => d.shape, mapFrom((s: products) => s.shape ?? null)),

  );
};
